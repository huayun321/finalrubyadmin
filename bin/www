#!/usr/bin/env node
var debug = require('debug')('test2');
var app = require('../app');
var http = require('http').Server(app);
var io = require('socket.io')(http);
var ss = require('socket.io-stream');
var path = require('path');
var mongoose =require('mongoose');
var Grid = require('gridform').gridfsStream;
var gm = require('gm');
var Material = require('../models/material');


var gfs = null;

//socket.io logic
io.of('/user').on('connection', function(socket) {
    console.log("connection");

    ss(socket).on('upload', function(stream, data) {
        console.log("saving...");
        //process tags

        if(data.tags.trim() == '') {
            data.tags = null;
        } else {
            data.tags = data.tags.trim().split(/\s+/);
            var tags = [];
            data.tags.forEach(function(tag) {
                if(tag.length <= 20) {
                    tags.push(tag);
                }

            });
            if(tags.length >= 1) {
                data.tags = tags;
            } else {
                data.tags = null;
            }

        }



        //init id gfs stream
        gfs = Grid(mongoose.connection.db, mongoose.mongo);
        //var iid = mongoose.Types.ObjectId();
        var writestream = gfs.createWriteStream({
        });
        var tws = gfs.createWriteStream({
            mode: 'w',
            filename: 'thumbnail' + '.png',
            content_type: 'image/png'
        });



        stream.on('end', function () {

            var material = new Material({
                imgId: writestream.id,
                thumbnailId: tws.id,
                tags: data.tags,
                size: (data.size / 1024)
            });

            material.save(function (err) {
                if (err) {
                    console.log(err);
                    return;
                }

                socket.emit('end-upload');
            })

        });

        //error
        stream.on('error', function (err) {
            console.log(err);
            socket.emit('stream-error', err);
        });

        //save to grid


        stream.pipe(writestream);
        gm(stream)
            .resize('200', '200')
            .stream('png')
            .pipe(tws);
    });


});

http.listen(3000, function(){
    console.log('listening on *:3000');
});

//app.set('port', process.env.PORT || 3000);
//
//var server = app.listen(app.get('port'), function() {
//  debug('Express server listening on port ' + server.address().port);
//});
